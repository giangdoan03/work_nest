// src/utils/notify-socket.js
import { io } from 'socket.io-client'

let sock = null
let boundHandlers = false
let boundUserId = null

export function connectNotifySocket(userId) {
    userId = String(userId || '')
    if (!userId) return null

    // ƒê√É c√≥ socket cho ƒë√∫ng user ‚Üí d√πng l·∫°i, KH√îNG t·∫°o m·ªõi
    if (sock && boundUserId === userId) return sock

    // C√≥ socket kh√°c user ‚Üí ƒë√≥ng h·∫≥n v√† reset state
    if (sock && boundUserId !== userId) {
        try { sock.disconnect() } catch {}
        sock = null
        boundHandlers = false
    }

    boundUserId = userId
    sock = io('https://notify.bee-soft.net', {
        path: '/socket.io/',
        transports: ['websocket', 'polling'],   // ∆∞u ti√™n websocket
        auth: { userId },
        reconnection: true,
        reconnectionAttempts: Infinity,
        reconnectionDelay: 800,
    })

    // log chuy·ªÉn transport ƒë·ªÉ d·ªÖ debug
    sock.io.on('upgrade', (transport) => {
        console.log('üöö upgraded to', transport.name) // "websocket"
    })

    sock.on('connect', () => console.log('‚úÖ Connected socket', sock.id))
    sock.on('disconnect', (r) => console.log('‚ùå Disconnect:', r))
    sock.on('connect_error', (e) => console.log('‚ùå connect_error:', e?.message || e))

    return sock
}

// ƒë·∫£m b·∫£o ch·ªâ g·∫Øn 1 l·∫ßn
export function onNotify(cb) {
    if (!sock) return
    if (!boundHandlers) {
        sock.off('notify')      // g·ª° m·ªçi handler c≈© (n·∫øu c√≥)
        sock.on('notify', cb)   // g·∫Øn 1 handler duy nh·∫•t
        boundHandlers = true
    }
}

export function getSocket() { return sock }
